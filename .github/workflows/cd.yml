name: Release & Deploy

on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write
  issues: write

env:
  GO_VERSION: "1.23.4"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  semantic-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.set-output.outputs.new_release_published }}
      new_release_version: ${{ steps.set-output.outputs.new_release_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git
          npm install -g @semantic-release/github
          npm install -g @semantic-release/exec

      - name: Create .releaserc
        run: |
          cat > .releaserc << EOF
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/github", {
                "assets": [
                  {"path": "dist/webserver", "label": "Binary"}
                ]
              }],
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md"],
                "message": "chore(release): \${nextRelease.version} [skip ci]\n\n\${nextRelease.notes}"
              }],
              ["@semantic-release/exec", {
                "prepareCmd": "mkdir -p dist && go build -o dist/webserver ."
              }]
            ]
          }
          EOF

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Set Outputs
        id: set-output
        run: |
          # Figure out if a new release was published. The simplest check is whether 'npx semantic-release'
          # ended up publishing anything:
          if npx semantic-release --dry-run | grep -q 'Published release'; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi

          # We'll record the newest tag as well
          echo "new_release_version=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

  publish:
    name: Publish Docker Image
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.semantic-release.outputs.new_release_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.semantic-release.outputs.new_release_version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: [semantic-release, publish]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying version ${{ needs.semantic-release.outputs.new_release_version }} to production"
          # Add your deployment steps here
          # e.g.:
          # kubectl set image deployment/webserver webserver=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.new_release_version }}
